import "std/memory"

export function strlen(value: cstr) : u64 {
	let idx : u64 = 0;
	while(value[idx] != '\0') {
		++idx;
	}
	return idx;
}

export type String {
	let length: u64 = 0;
	let ptr: char*;
}

export function clear(this: String*) : void {
	if(.length > 0) {
		.length = 0;
		free(.ptr);
		.ptr = null_pointer();
	}
}

// Set this String as the owner to the supplied CString
// After this call, the lifetime of 'value' is assumed to be managed by this String instance, and no one else.
// Useful to handle raw cstr returned by C API without creating a copy, or managing the cstr lifetime manually.
export function adopt_c_string(this: String*, value: cstr) : void {
	.length = strlen(value);
	.ptr = value;
}

// Create a String from a CString
// This creates a copy of the supplied CString
export function from_c_string(this: String*, value: cstr) : void {
	.clear();
	.length = strlen(value);
	.ptr = malloc(.length);
	let idx : u64 = 0;
	while(idx < .length) {
		.ptr[idx] = value[idx]; // Doesn't work yet.
		++idx;
	}
}

export function destructor(this: String*) : void {
	.clear();
}
