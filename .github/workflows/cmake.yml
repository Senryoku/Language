name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
            os: [windows-latest]
            #os: [windows-latest, ubuntu-latest]
            #include:
            #  - os: ubuntu-latest
            #    compiler: gcc
            #    gcc: 12

    steps:
    - uses: actions/checkout@v3
    
    - name: Cache LLVM 14.0.6
      id: cache-llvm-14-0-6
      uses: actions/cache@v3
      with:
        path: LLVM
        key: ${{ runner.os }}-llvm-14.0.6
        
    - name: Download LLVM
      if: steps.cache-llvm-14-0-6.outputs.cache-hit != 'true'
      run: curl "http://176.145.241.248/llvm-14.0.6-msvc-x64.7z" -o llvm.7z
        
    - name: Extract LLVM
      if: steps.cache-llvm-14-0-6.outputs.cache-hit != 'true'
      run: 7z x llvm.7z
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLLVM_ROOT="./LLVM"

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
      
