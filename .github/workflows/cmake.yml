name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
            os: [windows-latest]
            #os: [windows-latest, ubuntu-latest]
            #include:
            #  - os: ubuntu-latest
            #    compiler: gcc
            #    gcc: 12

    steps:
    - uses: actions/checkout@v3
    
    - uses: suisei-cn/actions-download-file@v1.0.1
      id: downloadllvm  # Remember to give an ID if you need the output filename
      name: Download LLVM
      with:
        url: "https://drive.internxt.com/s/file/5eef10bae75ca3aa3022/68e12ab5c9c28d168bc06a67ee603185406bf83cf274def8794f5e505a0780fa"
        target: public/
        
    - name: Extract LLVM
      run: 7z x ${{ steps.downloadfile.outputs.filename }} 

# Disabled, can't get LLVM to work in CI
#    - name: Cache LLVM and Clang
#      id: cache-llvm
#      uses: actions/cache@v2
#      with:
#        path: |
#          C:/Program Files/LLVM
#          ./llvm
#        key: llvm-14.0.0
#    - name: Install LLVM and Clang
#      uses: KyleMayes/install-llvm-action@v1.5.3
#      with:
#        version: "14.0.0"
#        cached: ${{ steps.cache-llvm.outputs.cache-hit }}

# Get the correct version of GCC for Ubuntu (12 not available yet?)
#    - name: Select GCC
#      if: matrix.gcc
#      run: |
#        echo "CC=gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
#        echo "CXX=g++-${{ matrix.gcc }}" >> $GITHUB_ENV
#        
#    - name: Get GCC
#      if: startsWith(matrix.os, 'ubuntu')
#      run: |
#        sudo apt update
#        sudo apt install gcc-12 g++-12
#      shell: bash

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLLVM_DIR=LLVM

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
